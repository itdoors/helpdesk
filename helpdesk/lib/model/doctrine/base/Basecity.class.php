<?php

/**
 * Basecity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $region_id
 * @property integer $district_id
 * @property float $population
 * @property float $square
 * @property float $density
 * @property enum $citytype
 * @property region $Region
 * @property District $District
 * @property Doctrine_Collection $Stuff
 * @property Doctrine_Collection $Dogovor
 * @property Doctrine_Collection $organization
 * @property Doctrine_Collection $Departments
 * @property Doctrine_Collection $StuffCity
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method string              getName()         Returns the current record's "name" value
 * @method integer             getRegionId()     Returns the current record's "region_id" value
 * @method integer             getDistrictId()   Returns the current record's "district_id" value
 * @method float               getPopulation()   Returns the current record's "population" value
 * @method float               getSquare()       Returns the current record's "square" value
 * @method float               getDensity()      Returns the current record's "density" value
 * @method enum                getCitytype()     Returns the current record's "citytype" value
 * @method region              getRegion()       Returns the current record's "Region" value
 * @method District            getDistrict()     Returns the current record's "District" value
 * @method Doctrine_Collection getStuff()        Returns the current record's "Stuff" collection
 * @method Doctrine_Collection getDogovor()      Returns the current record's "Dogovor" collection
 * @method Doctrine_Collection getOrganization() Returns the current record's "organization" collection
 * @method Doctrine_Collection getDepartments()  Returns the current record's "Departments" collection
 * @method Doctrine_Collection getStuffCity()    Returns the current record's "StuffCity" collection
 * @method city                setId()           Sets the current record's "id" value
 * @method city                setName()         Sets the current record's "name" value
 * @method city                setRegionId()     Sets the current record's "region_id" value
 * @method city                setDistrictId()   Sets the current record's "district_id" value
 * @method city                setPopulation()   Sets the current record's "population" value
 * @method city                setSquare()       Sets the current record's "square" value
 * @method city                setDensity()      Sets the current record's "density" value
 * @method city                setCitytype()     Sets the current record's "citytype" value
 * @method city                setRegion()       Sets the current record's "Region" value
 * @method city                setDistrict()     Sets the current record's "District" value
 * @method city                setStuff()        Sets the current record's "Stuff" collection
 * @method city                setDogovor()      Sets the current record's "Dogovor" collection
 * @method city                setOrganization() Sets the current record's "organization" collection
 * @method city                setDepartments()  Sets the current record's "Departments" collection
 * @method city                setStuffCity()    Sets the current record's "StuffCity" collection
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Basecity extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('city');
        $this->hasColumn('id', 'integer', null, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('region_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('district_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('population', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('square', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('density', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('citytype', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'м',
              1 => 'смт',
              2 => 'с',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('region as Region', array(
             'local' => 'region_id',
             'foreign' => 'id'));

        $this->hasOne('District', array(
             'local' => 'district_id',
             'foreign' => 'id'));

        $this->hasMany('stuff as Stuff', array(
             'refClass' => 'sfuff_city',
             'local' => 'city_id',
             'foreign' => 'stuff_id'));

        $this->hasMany('Dogovor', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('organization', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('departments as Departments', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('sfuff_city as StuffCity', array(
             'local' => 'id',
             'foreign' => 'city_id'));
    }
}