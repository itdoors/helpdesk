<?php

/**
 * Baseattach
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $filename
 * @property string $filepath
 * @property integer $comments_id
 * @property comments $Comments
 * 
 * @method integer  getId()          Returns the current record's "id" value
 * @method string   getFilename()    Returns the current record's "filename" value
 * @method string   getFilepath()    Returns the current record's "filepath" value
 * @method integer  getCommentsId()  Returns the current record's "comments_id" value
 * @method comments getComments()    Returns the current record's "Comments" value
 * @method attach   setId()          Sets the current record's "id" value
 * @method attach   setFilename()    Sets the current record's "filename" value
 * @method attach   setFilepath()    Sets the current record's "filepath" value
 * @method attach   setCommentsId()  Sets the current record's "comments_id" value
 * @method attach   setComments()    Sets the current record's "Comments" value
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Baseattach extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('attach');
        $this->hasColumn('id', 'integer', null, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             ));
        $this->hasColumn('filename', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('filepath', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('comments_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('comments as Comments', array(
             'local' => 'comments_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));
    }
}