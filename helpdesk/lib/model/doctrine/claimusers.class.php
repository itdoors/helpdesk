<?php

/**
 * claimusers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class claimusers extends Baseclaimusers
{
    

    
    public function saveClientKuratorStuff($claim_id, $client_id, $kurator, $stuff_id, $dispatchers = false, $supervisors = false)
    {
        if ($kurator<>null) $this->setKurator($claim_id, $kurator);
        if ($stuff_id<>'') $this->setStuff($claim_id, $stuff_id);
        if ($client_id<>'') $this->setClient($claim_id, $client_id);
        if ($dispatchers) $this->setDispatcher($claim_id);
        if ($supervisors) $this->setSupervisor($claim_id);
    }
    
        
    public function setSupervisor($claim_id)
    {
        $claimuser = new claimusers();
        $claimuser->delAllSupervisors($claim_id);
        $bool = true;
        $sipervisors = $this->getAllSupervisors($claim_id);
        foreach ($sipervisors as $sipervisor)
        {
           $claimuser = new claimusers();
           $claimuser->setClaimId($claim_id);
           $claimuser->setUserId($sipervisor->getId());
           $claimuser->setUserkey(sfConfig::get('claimuserkey_supervisor'));
           if (!$claimuser->trySave()) $bool = false; 
        }   
         return $bool;
    }
    
    
    public function setDispatcher($claim_id)
    {
        $claimuser = new claimusers();
        $claimuser->delAllDispatchers($claim_id);
        $bool = true;
        $dispatchers = $this->getAllDispatchers();
        foreach ($dispatchers as $dispatcher)
        {
           $claimuser = new claimusers();
           $claimuser->setClaimId($claim_id);
           $claimuser->setUserId($dispatcher->getId());
           $claimuser->setUserkey(sfConfig::get('claimuserkey_dispatcher'));
           if (!$claimuser->trySave()) $bool = false; 
        }   
         return $bool;
    }
    //todo 8: заменить все 3-мя функциями delAllClaimusers(claim_id, userkey)
    //  getAllClaimusers(claim_id, userkey)
    //  setClaimusers(claim_id, userkey)  ну или както так
    static public function setSmeta($claim_id)
    {
        $claimuser = new claimusers();
        $claimuser->delAllSmetas($claim_id);//fdfdfdf
        $bool = true;
        $smetas = $claimuser->getAllSmetas();    //fdfdfdf
        foreach ($smetas as $smeta)
        {
           $claimuser = new claimusers();
           $claimuser->setClaimId($claim_id);
           $claimuser->setUserId($smeta->getId());
           $claimuser->setUserkey(sfConfig::get('claimuserkey_smeta'));
           if (!$claimuser->trySave()) $bool = false; 
        }   
         return $bool;
    }
    
    public function delAllSmetas($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('s')
        ->where('claim_id = '.$claim_id)
        ->addWhere('userkey = \''.sfConfig::get('claimuserkey_smeta').'\'')
        ->delete()
        ->execute();
    }
    
    public function getAllSmetas()
    {
        $q = Doctrine::getTable('sfGuardUser')
        ->createQuery('su')
        ->leftJoin('su.Permissions sp')
        ->where('sp.name = \''.sfConfig::get('claimuserkey_smeta').'\'')
        ->execute();
        return $q;
    }
    
    
    
    public function delAllSupervisors($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('s')
        ->where('claim_id = '.$claim_id)
        ->addWhere('userkey = \''.sfConfig::get('claimuserkey_supervisor').'\'')
        ->delete()
        ->execute();
    }
    
    public function delAllDispatchers($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('s')
        ->where('claim_id = '.$claim_id)
        ->addWhere('userkey = \''.sfConfig::get('claimuserkey_dispatcher').'\'')
        ->delete()
        ->execute();
    }
        
    public function getAllDispatchers()
    {
        $q = Doctrine::getTable('sfGuardUser')
        ->createQuery('su')
        ->leftJoin('su.Permissions sp')
        ->where('sp.name = \''.sfConfig::get('user_dispatcher').'\'')
        ->execute();
        return $q;
    }
    
    public function getAllSupervisors()
    {
        $q = Doctrine::getTable('sfGuardUser')
        ->createQuery('su')
        ->leftJoin('su.Permissions sp')
        ->where('sp.name = \''.sfConfig::get('user_supervisor').'\'')
        ->execute();
        return $q;
    }
    
                           
    public function setClient($claim_id, $client_id)
    {
        $claimuser_id = $this->hasClient($claim_id);
        if ($claimuser_id) 
        {
            $claimuser = Doctrine::getTable('claimusers')->find($claimuser_id);
            
        } else
        {
            $claimuser = new claimusers();
        }
        $claimuser->setClaimId($claim_id);
        $claimuser->setUserId($client_id);
        $claimuser->setUserkey(sfConfig::get('claimuserkey_client'));
        
        if ($claimuser->trySave()) return true; else return false;
        
    }
    
    public function delAllKurators($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('s')
        ->where('claim_id = '.$claim_id)
        ->addWhere('userkey = \''.sfConfig::get('claimuserkey_kurator').'\'')
        ->delete()
        ->execute();
        
        
    }
    public function delAllStuff($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('s')
        ->where('claim_id = '.$claim_id)
        ->addWhere('userkey = \''.sfConfig::get('claimuserkey_stuff').'\'')
        ->delete()
        ->execute();
    }
    
    
    public function setKurator($claim_id, $kurators)
    {
        $claimuser = new claimusers();
        $claimuser->delAllKurators($claim_id);
        $bool = true;
        foreach ($kurators as $kurator)
        {
           $claimuser = new claimusers();
           $claimuser->setClaimId($claim_id);
           $claimuser->setUserId($kurator->getUserId());
           $claimuser->setUserkey(sfConfig::get('claimuserkey_kurator'));
           if (!$claimuser->trySave()) $bool = false; 
           else{
               $user_data = Doctrine::getTable('sfGuardUser')->find($kurator->getUserId());
               //die($user_data->getEmailAddress());
               $message = sfContext::getInstance()->getMailer()->compose(
                  array('noreply@griffin.ua' => 'Service Desk Griffin'),
                  $user_data->getEmailAddress(),
                  //'npfkrada@gmail.com',
                  'Заявка №'.$claim_id.' назначен куратор',
                  'Вы назначены куратором по заявке №'.$claim_id.'
Подробную информацию можно получить по адресу: http://helpdesk.griffin.ua/kurator.php/
Не отвечайте на это письмо.
                  '
               );
               sfContext::getInstance()->getMailer()->send($message);
               
           }      
        }
         return $bool;
    }
    

    
/*    public function setKurator($claim_id, $kurator_id)
    {
        $claimuser_id = $this->hasKurator($claim_id);
        if ($claimuser_id) 
        {
            $claimuser = Doctrine::getTable('claimusers')->find($claimuser_id);
            
        } else
        {
            $claimuser = new claimusers();
        }
        $claimuser->setClaimId($claim_id);
        $claimuser->setUserId($kurator_id);
        $claimuser->setUserkey(sfConfig::get('claimuserkey_kurator'));
        if ($claimuser->trySave()) return true; else return false;
        
    }*/
    
    public function setStuff($claim_id, $stuffs)
    {
        
        $claimuser = new claimusers();
        $claimuser->delAllStuff($claim_id);
        $bool = true;
        foreach ($stuffs as $stuff)
        {
           $claimuser = new claimusers();
           $claimuser->setClaimId($claim_id);
           $claimuser->setUserId($stuff->getUserId());
           $claimuser->setUserkey(sfConfig::get('claimuserkey_stuff'));
           if (!$claimuser->trySave()) $bool = false;
           else{
               $user_data = Doctrine::getTable('sfGuardUser')->find($stuff->getUserId());
               
               $message = sfContext::getInstance()->getMailer()->compose(
                  array('noreply@griffin.ua' => 'Service Desk Griffin'),
                  $user_data->getEmailAddress(),
                  //'muzyka@bk.ru',
                  'Заявка №'.$claim_id.' назначен исполнитель',
                  'Вы назначены исполнителем по заявке №'.$claim_id.'
Подробную информацию можно получить по адресу: http://helpdesk.griffin.ua/stuff.php/
Не отвечайте на это письмо.
                  '
               );
               sfContext::getInstance()->getMailer()->send($message); 
               
           }             
        }
         return $bool;
        
    }
    
    public function hasClient($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('cu')
        ->where('userkey = \''.sfConfig::get('claimuserkey_client').'\'')
        ->addWhere('claim_id = '.$claim_id)
        ->fetchOne();
        if ($claimuser<>null) return $claimuser->getId(); else return false;
    }
    
    /*public function hasKurator($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('cu')
        ->where('userkey = \''.sfConfig::get('claimuserkey_kurator').'\'')
        ->addWhere('claim_id = '.$claim_id)
        ->fetchOne();
        if ($claimuser<>null) return $claimuser->getId(); else return false;
    }*/
    
    public function hasKurator($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('cu')
        ->where('userkey = \''.sfConfig::get('claimuserkey_kurator').'\'')
        ->addWhere('claim_id = '.$claim_id)
        ->fetchOne();
        if ($claimuser<>null) return true; else return false;
    }
    
    public function hasStuff($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('cu')
        ->where('userkey = \''.sfConfig::get('claimuserkey_stuff').'\'')
        ->addWhere('claim_id = '.$claim_id)
        ->fetchOne();
        if ($claimuser<>null) return $claimuser->getId(); else return false;
    }
    
    public function getClaimClientId($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('cu')
        ->where('claim_id = '.$claim_id)
        ->addWhere('userkey = \''.sfConfig::get('claimuserkey_client').'\'')
        ->fetchOne();
        if ($claimuser) return $claimuser->getUserId(); else return null;
    }
    
    public function getClaimKuratorId($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('cu')
        ->where('claim_id = '.$claim_id)
        ->addWhere('userkey = \''.sfConfig::get('claimuserkey_kurator').'\'')
        ->execute();
        if ($claimuser) return $claimuser; else return null;
    }
    public function getClaimStuffId($claim_id)
    {
        $claimuser = Doctrine::getTable('claimusers')
        ->createQuery('cu')
        ->where('claim_id = '.$claim_id)
        ->addWhere('userkey = \''.sfConfig::get('claimuserkey_stuff').'\'')
        ->execute();
        if ($claimuser) return $claimuser; else return null;
    }
    
 }
