<?php

/**
 * Salary
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Salary extends BaseSalary
{
  const SUMMARY_COEF_OBNAL = 1.17;
  const SUMMARY_COEF_DAY = 1;
  const SUMMARY_COEF_EVENING = 1.2;
  const SUMMARY_COEF_NIGHT = 1.4;
  const SUMMARY_COEF_HOLIDAY = 2;

  static public function getMonthInfo($year, $month)
  {
    $query = Doctrine::getTable('Salary')
      ->createQuery('s')
      ->where('s.year =?', $year)
      ->addWhere('s.month = ?', $month)
      ->fetchOne();

    return $query ? $query : new self;
  }

  public function getWeekendsArray()
  {
    $weekends = explode(',', $this->getWeekends());

    return $weekends;
  }

  public function getAllWeekends()
  {
    $days_count = date('t', mktime(0, 0, 0, $this->getMonth(), 1, $this->getYear()));

    $holidays = explode(',', $this->getWeekends());

    for($day = 1; $day <= $days_count; $day++)
    {
      $date = new DateTime();
      $date->setDate($this->getYear(), $this->getMonth(), $day);
      $date->format('U');

      $isThisDayIsHoliday = in_array($day, $holidays);
      $isThisDayIsWeekend = in_array($date->format('D'), array('Sun', 'Sat'));

      if ($isThisDayIsWeekend)
      {
        if (!in_array($day, $holidays))
        {
          $holidays[] = $day;
        }
      }

      if ($isThisDayIsHoliday && $isThisDayIsWeekend) // add holiday on monday
      {
        $newHoliday = null;

        if ($date->format('D') == 'Sat')
        {
          $newHoliday = $day + 2;
        }
        if ($date->format('D') == 'Sun')
        {
          $newHoliday = $day + 1;
        }

        if (!in_array($newHoliday, $holidays))
        {
          $holidays[] = $newHoliday;
        }
      }
    }

    return $holidays;
  }

  /**
   * Count salary
   *
   * @param string $employmentTypeLukey
   * @param int $totalDays
   * @param int $hospitalTill5
   * @param int $hospitalAfter5
   * @param int $vacation
   * @param DepartmentPeopleMonthInfo $people
   * @param int $hoursDays
   * @param int $hoursEvening
   * @param int $hoursNight
   * @param int $hoursHolidays
   * @return string
   */

  public function summary($employmentTypeLukey, $totalDays, $hospitalTill5, $hospitalAfter5, $vacation, $people, $hoursDays, $hoursEvening, $hoursNight, $hoursHolidays)
  {
    $summary = 0;

    $oklad = $people->getSalary();
    $bonus = $people->getBonus();
    $fine = $people->getFine();

    $summaryCoef = $this->getSummaryCoef();

    $surchargeTotal = $this->getSurchargeTotal($people);

    if (!$this->getDaysCount())
    {
      return 0;
    }

    switch ($employmentTypeLukey)
    {
      case lookup::EMPLOYMENT_TYPE_A:
        $daysCount = $this->getDaysCount();

        if ($people->getIsCleanSalary() && $people->getNormaDays())
        {
          $daysCount = $people->getNormaDays();
        }

        $totalHospitalTill5 =  $oklad / $this->getDaysCount() * $hospitalTill5 * 1.332;
        $totalHospitalAfter5 = $oklad / $this->getDaysCount() * $hospitalAfter5 * 0.332;
        $totalVacation = $vacation ? $oklad /  29.58 * $vacation: 0;

        $stavka = $oklad /  $daysCount * $totalDays;

        $summary = ($stavka + $totalVacation - $fine + $bonus) * $summaryCoef + $totalHospitalTill5 + $totalHospitalAfter5;

        if ($people->getIsCleanSalary() && $people->getNormaDays())
        {
          if ($summary > $oklad)
          {
            $summary = $oklad;
          }
        }

        break;
      case lookup::EMPLOYMENT_TYPE_B:
        $daysCount = $this->getDaysCount();

        if ($people->getIsCleanSalary() && $people->getNormaDays())
        {
          $daysCount = $people->getNormaDays();
        }

        $summary = ($oklad/$daysCount) * $totalDays + $bonus - $fine;

        if ($people->getIsCleanSalary() && $people->getNormaDays())
        {
          if ($summary > $oklad)
          {
            $summary = $oklad;
          }
        }
        break;
      case lookup::EMPLOYMENT_TYPE_C:
        $daysCount = $this->getDaysCount();

        if ($people->getIsCleanSalary() && $people->getNormaDays())
        {
          $daysCount = $people->getNormaDays();
        }
        $summary = (($oklad/$daysCount) * $totalDays + $bonus - $fine) *1.347;

        if ($people->getIsCleanSalary() && $people->getNormaDays())
        {
          if ($summary > $oklad)
          {
            $summary = $oklad;
          }
        }
        break;

      case lookup::EMPLOYMENT_TYPE_D:

        $stavkaCoef = $oklad /  $this->getDaySalary();

        $summaryDays = $hoursDays * self::SUMMARY_COEF_DAY;
        $summaryEvening = $hoursEvening * self::SUMMARY_COEF_EVENING;
        $summaryNight = $hoursNight * self::SUMMARY_COEF_NIGHT;
        $summaryHoliday = $hoursHolidays * self::SUMMARY_COEF_HOLIDAY;

        $summary = ($summaryDays + $summaryEvening + $summaryNight + $summaryHoliday) * $stavkaCoef * $summaryCoef;
        break;
    }

    $summary += $surchargeTotal;

    return sprintf("%0.2f", $summary);
  }

  /**
   * Returns scalar surcharge
   *
   * @param DepartmentPeople $people
   *
   * @return int
   */
  public function getSurchargeTotal($people)
  {
    $surcharge = $people->getSurcharge();

    $coef = 0;

    if (!$surcharge)
    {
      return 0;
    }

    $surchargeTypeChar = $people->getSurchargeTypeChar();

    switch ($surchargeTypeChar)
    {
      case lookup::EMPLOYMENT_TYPE_CHAR_A:
        $coef = $this->getSummaryCoef();
        break;
      case lookup::EMPLOYMENT_TYPE_CHAR_B:
        $coef = self::SUMMARY_COEF_OBNAL;
        break;
      case lookup::EMPLOYMENT_TYPE_CHAR_C:
        $coef = self::SUMMARY_COEF_OBNAL;
        break;
      case lookup::EMPLOYMENT_TYPE_CHAR_D:
        $coef = $this->getSummaryCoef();
        break;
    }

    return $surcharge * $coef;
  }
}
