<?php

/**
 * DocDocumentGroup
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class DocDocumentGroup extends PluginDocDocumentGroup
{
   public function save(Doctrine_Connection $conn = null)
   {
       parent::save();
       LogIntranet::SaveLog($this);
   }
   public function delete(Doctrine_Connection $conn = null)
   {
       $this->setIsdeleted(true);
       parent::save();
       LogIntranet::SaveLog($this);
   }

  public function hardDelete(Doctrine_Connection $conn = null)
  {
    parent::delete();
  }
   public function restore(Doctrine_Connection $conn = null)
   {
       $this->setIsdeleted(false);
       parent::save();
       LogIntranet::SaveLog($this);
   }
    
   public function getTreeElement()
   {
       $s = '';
       for ($i = 1; $i<$this->getLevel(); $i++)
       {
          $s .= ' - '; 
       }
       return $s.$this->getName();
   }
   
   public function generateBreadcrumbs()
   {
      $current_category = $this;
      $breadcrumbs = array();
      //$breadcrumbs[] = $current_category->getName();
      $breadcrumbs[] = '<a href="'.url_for('category/index?parent_id='.$current_category->getId()).'">'.$current_category->getName().'</a>';
      while ($current_category->getParentId())
      {
        $breadcrumbs[] = ' > ';
        $breadcrumbs[] = '<a href="'.url_for('category/index?parent_id='.$current_category->getParentId()).'">'.$current_category->getParentCategory().'</a>';
        $current_category = $current_category->getParentCategory(); 
      }
      if (count($breadcrumbs)) $breadcrumbs[] = ' > '; 
      $breadcrumbs[] = '<a href="'.url_for('@homepage').'">'.__('Main').'</a>';
      $s = '';
      //$i = count($breadcrumbs)-1;
      for ($i = count($breadcrumbs)-1; $i > -1; $i--)
      {
        $s .= $breadcrumbs[$i];
      }
      return $s;
   }
   
   static function hasPermmisions($custom_category_id = null)
   {
     //temporary hack  
     $user = sfContext::getInstance()->getUser();
     if ($user->isSuperAdmin())
     {
       return 'action_all';
     }

     if ($user->hasPermission('intranet'))
     {
       return 'action_all';
     }
     
     $user_id = $user->getAttribute('user_id', null, 'sfGuardSecurityUser');
     //$session_category_id = sfContext::getInstance()->getUser()->getAttribute('category_id');
     $category_id = sfContext::getInstance()->getUser()->getAttribute('category_id');
     //$cagegory_id = $custom_category_id ? $custom_category_id : $session_category_id;
     
     //с этим надо разобраться 
     //если !$category_id значит мы на главной
     if (!$category_id) return true;
     //проверка на пользователя, создававшего категорию
     $create_user = Doctrine::getTable('DocDocumentGroup')->find($category_id);
     if ($create_user->getUserId() == $user_id) 
     {
       return 'action_all';
     }
     
     $groups = Doctrine::getTable('SfGuardUserGroup')
      ->createQuery('sfu')
      ->select('sfu.group_id')
      ->where('sfu.user_id ='.$user_id)
      ->execute();
     $group_ids = array();
     foreach ($groups as $key)
     {
       $group_ids[] = $key->getGroupId(); 
     }
     //проверяем назначены какие либо права для данной категории
     $q_group_is_not_empty = Doctrine::getTable('DocDocumentGroupSfGroups')
        ->createQuery('du')
        ->select('du.actionkey')
        ->where('du.docdocumentgroup_id ='.$category_id)
        ->execute();
      $q_user_is_not_empty = Doctrine::getTable('DocDocumentGroupSfUsers')
        ->createQuery('su')
        ->select('su.actionkey')
        ->where('su.docdocumentgroup_id ='.$category_id)
        ->execute();
      
      if (!count($q_group_is_not_empty)&&!count($q_user_is_not_empty)) return 'action_show';
      //проверка закончена
     
     $q_group = Doctrine::getTable('DocDocumentGroupSfGroups')
        ->createQuery('du')
        ->select('du.actionkey')
        ->whereIn('du.sfguardgroup_id', $group_ids)
        ->andWhere('du.docdocumentgroup_id ='.$category_id)
        ->execute();
      $group_permission = DocDocumentGroup::getPriorityActionKey($q_group);
      $q_group = Doctrine::getTable('DocDocumentGroupSfUsers')
        ->createQuery('su')
        ->select('su.actionkey')
        ->whereIn('su.sfguarduser_id', $user_id)
        ->andWhere('su.docdocumentgroup_id ='.$category_id)
        ->execute();
      $user_permission = DocDocumentGroup::getPriorityActionKey($q_group);
      /*$create_user = Doctrine::getTable('DocDocumentGroup')->find($category_id);
      if ($create_user->getUserId() == $user_id) return 'action_all';  */
      if ($user_permission) return $user_permission;
      return $group_permission;
       
   }
   //функция определяет приоритет прав доступа
   static function getPriorityActionKey(Doctrine_Collection $arr)
   {
      if (!count($arr)) return '';
      $s = 'action_show';
      foreach ($arr as $key)
      {
          switch ($key['actionkey'])
          {
             case 'action_edit':
               if ($s != 'action_all') $s = 'action_edit';
             break;
             case 'action_all':
               $s = 'action_all';
             break;  
          }
      }
    return $s;     
   }
}