<?php

/**
 * GrafikTime
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class GrafikTime extends BaseGrafikTime
{
  public function getResult()
  {
    $res = $this->getTotal();

    return $res;
  }

  public function getFromTimeTimestamp()
  {
    $from_time = $this->getFromTime();
    $from_time_timestamp = strtotime($from_time);

    return $from_time_timestamp;
  }

  public function getToTimeTimestamp()
  {
    $to_time = $this->getToTime();
    $to_time_timestamp = $to_time == '00:00:00' ? strtotime('23:00:00') + 3600 : strtotime($to_time);

    return $to_time_timestamp;
  }

  public function getWorkHoursInInterval($from_interval, $to_interval)
  {
    $from_interval_timestamp = strtotime($from_interval);
    $to_interval_timestamp = $to_interval == '00:00:00' ? strtotime('23:00:00') + 3600 : strtotime($to_interval);

    $from_time_timestamp = $this->getFromTimeTimestamp();
    $to_time_timestamp = $this->getToTimeTimestamp();

    $down_time = $from_interval_timestamp;
    $up_time = $to_interval_timestamp;

    if ($to_time_timestamp <= $from_interval_timestamp || $from_time_timestamp > $to_interval_timestamp)
    {
      return 0;
    }

    if ($from_time_timestamp > $from_interval_timestamp)
    {
      $down_time = $from_time_timestamp;
    }

    if ($to_time_timestamp < $to_interval_timestamp)
    {
      $up_time = $to_time_timestamp;
    }

    return ($up_time - $down_time)/3600;
  }


  public function getDayHours()
  {
    return $this->getWorkHoursInInterval('06:00:00', '18:00:00');
  }

  public function getEveningHours()
  {
    return $this->getWorkHoursInInterval('18:00:00', '22:00:00');
  }

  public function getNightHours()
  {
    return $this->getWorkHoursInInterval('00:00:00', '06:00:00') + $this->getWorkHoursInInterval('22:00:00', '00:00:00');
  }

  public function recount()
  {
    $form_time = $this->getFromTime();
    $to_time = $this->getToTime();

    /*$diff = (strtotime($to_time) - strtotime($form_time))/3600; */

    $from_time_timestamp = strtotime($form_time);
    $to_time_timestamp = $to_time == '00:00:00' ? strtotime('23:00:00') + 3600 : strtotime($to_time);

    $diff = ($to_time_timestamp - $from_time_timestamp)/3600;

    // Not official
    if ($this->getNotOfficially())
    {
      $this->setTotalNotOfficially($diff);
      $this->setTotalDayNotOfficially($this->getDayHours());
      $this->setTotalEveningNotOfficially($this->getEveningHours());
      $this->setTotalNightNotOfficially($this->getNightHours());

    }
    else
    {
      $this->setTotal($diff);
      $this->setTotalDay($this->getDayHours());
      $this->setTotalEvening($this->getEveningHours());
      $this->setTotalNight($this->getNightHours());
    }

    $this->resetDependsOnNotOfficially();

    $this->save();
  }

  /**
   * If reset from officially to not officially need to be total be NULL
   */
  protected function resetDependsOnNotOfficially()
  {
    if ($this->getNotOfficially())
    {
      $this->setTotal(NULL);
      $this->setTotalDay(NULL);
      $this->setTotalEvening(NULL);
      $this->setTotalNight(NULL);
    }
    else
    {
      $this->setTotalNotOfficially(NULL);
      $this->setTotalDayNotOfficially(NULL);
      $this->setTotalEveningNotOfficially(NULL);
      $this->setTotalNightNotOfficially(NULL);
    }
  }

  public function delete(Doctrine_Connection $conn = null)
  {
    $params = $this->toArray();

    $grafik = Grafik::findOrCreateGrafik($params);

    parent::delete($conn);

    $grafik->recount();
  }

  public function isOfficially()
  {
    return !$this->getNotOfficially();
  }
}
