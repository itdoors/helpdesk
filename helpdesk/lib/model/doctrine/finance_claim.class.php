<?php

/**
 * finance_claim
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class finance_claim extends Basefinance_claim
{
    public function save(Doctrine_Connection $conn = null, $user_id = null)
    {
       $new = $this->isNew();
       parent::save();
       if ($new) {
           $this->refreshFinanceClaim();
           $nds = Doctrine::getTable('lookup')->getNds();
           $obnal = Doctrine::getTable('lookup')->getObnal();
           log_claim::NewLogRecordFinance($this->getClaimId(), 'Финансовые показатели созданы. '.'Добавлены значения НДС = '.$nds.', Коэф = '.$obnal,sfConfig::get('logcliam_finance'), $this->getId(), $user_id, $this->getClaimId());
       }
    } 
    
    public function objectFieldSaveToLogClaim($field,$toString)
    {
       if (!$field||!$toString) return null;
       log_claim::NewLogRecordFinance($this->getClaimId(), sfConfig::get('logcliam_'.$field)." ".$this->$toString(), sfConfig::get('logcliam_finance').'_'.$field, $this->getId());  
    }
    
    public function ReCountField($relfield)
     {
         switch($relfield){
            case 'costs_nds':
              $this->setCostsNds($this->getCostsNonnds()*(1+$this->getNds()));
            break;                
            case 'costs_nonnds':
              $this->setCostsNonnds($this->getCostsNds()/(1+$this->getNds()));
            break;
            case 'income_nds':
              $this->setIncomeNds($this->getIncomeNonnds()*(1+$this->getNds()));
            break;
            case 'income_nonnds':
              $this->setIncomeNonnds($this->getIncomeNds()/(1+$this->getNds()));
            break;
            
            
        }
     }
     
     public function getRealCosts()
     {
         
         return $this->getCostsN()*(1+$this->getObnal()) + $this->getCostsNonnds()+$this->getCostsBeznalnonnds(); 
     }
     
     public function getRealCostsNds()
     {
         return ($this->getCostsN()*(1+$this->getObnal()) + $this->getCostsNonnds())*(1+$this->getNds())+$this->getCostsBeznalnonnds(); 
     }
     
     
     public function refreshProfitability()
     {
         //if ($this->getRealCosts())
         $this->setProfitability(
           $this->getIncomeNonnds()-$this->getRealCosts()
         );
         //$this->trySave();
     }
     
     public function refreshFinanceClaim()
     {
         
         $this->setCostsNonnds($this->getCostsNds()/(1+$this->getNds()));
         $this->setIncomeNonnds($this->getIncomeNds()/(1+$this->getNds()));
         $this->refreshProfitability();    
         $this->trySave();
     }
     
     public function getProfitabilityPersent()
     {
         if ($this->getIncomeNonnds()) return round($this->getProfitability()/$this->getIncomeNonnds()*100,2);
         else return false;
     }
     
/*     public function getProfitabilityResponse()
     {
         if ($this->getProfitability() != null&&$this->getProfitability() != 0) 
         return round($this->getProfitability())." ".$this->getProfitabilityAnalytics();
         else return $this->getProfitabilityAnalytics();
     }*/
     
/*     public function getProfitabilityAnalytics()
     {
         if (!$this->getRealCosts()||!$this->getIncomeNonnds()) return 'Недостаточно данных для расчета';
         if ($this->getProfitability()<1) 
         {
           return "Нерентабельно";
         }  
     } */
     
     public function getCostsN()
     {
         if (!$this->isNew()) return finance_claim::getTotalCostsnStatic($this->getId());
         else return null;
     } 
     
/*     public function getCostsNew()
     {
         if (!$this->isNew()) return finance_claim::getTotalCostsnStatic($this->getId());
         else return null;
     } */
     
     
     public function getStatusLastDate()
     {
         $q = Doctrine::getTable('log_claim')
        ->createQuery('l')
        ->where('l.claim_id = '.$this->getClaimId())
        ->addWhere('l.finance_claim_id = '.$this->getId())
        ->addWhere('l.log_claim_type = \''.sfConfig::get('logclaimtype_finance_status_id').'\'')
        ->orderBy('l.createdatetime DESC')
        ->fetchOne();
        
        if ($q) return $q->getCreatedatetimeGood(); else return null;
     }
     
     /*public function getIncomeNdsFloat()
     {
         return printf("%01.2f", $this->getIncomeNds())
     }
     */
     public function getIncomeNdsFloat()
     {
         return sprintf("%01.2f", $this->getIncomeNds());
     }
     public function getCostsNFloat()
     {
         return sprintf("%01.2f", $this->getCostsN());
     }
     public function getCostsNdsFloat()
     {
         return sprintf("%01.2f", $this->getCostsNds());
     }
     
     public function getCostsBeznalNonndsFloat()
     {
         return sprintf("%01.2f", $this->getCostsBeznalnonnds());
     }
     
     static function getTotalCostsnStatic($finance_claim_id)
     {
        $q = Doctrine::getTable('FcCostsn')
        ->createQuery('fc')
        ->where('fc.finance_claim_id ='.$finance_claim_id)
        ->execute();
        return $q->getSum('value'); 
     }
     
     public static function newByGroupClaim($claim_id, $work, $real_department, $formula = null, $nds = null, $obnal = null)
     {
         $finance_claim = new finance_claim();
         $status = Doctrine::getTable('status')->getStatusOpen();
         $finance_claim->setStatusId($status->getId());
         $finance_claim->setClaimId($claim_id);
         $finance_claim->setWork($work);
         $finance_claim->setNds($nds);
         $finance_claim->setObnal($obnal);
         if ($formula)
         {
            
           eval($formula);
            //if (is_float($income_nds)) $finance_claim->setIncomeNds($income_nds);
            if (isset($income_nds))
            {
                
                if (is_int($income_nds)||is_float($income_nds)) $finance_claim->setIncomeNds($income_nds);  
            } 
           
         }
         $finance_claim->save(null, -1);
     }
     
     
     
}
