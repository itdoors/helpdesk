<?php

/**
 * claimTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class claimTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object claimTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('claim');
    }
    
    public function getClosedClaims()
    {
      return Doctrine_Core::getTable('claim')
      ->createQuery('a')
      ->where('isclosedclient = true')
      //->addWhere('isclosedstuff = true')
      ->orderBy('createdatetime DESC')
      ->execute();
    }
    public function getOpenedClaimsForClient()
    {
       $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
       $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('c.closedatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('d.added_field as departments_added_filed')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_stuff').'\'
                ),
        \', \'
        ) AS stuff')
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.ClaimUsers clus')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st')
      ->leftJoin('d.ClientDepartments cd')
      ->leftJoin('cd.Client client')
      ->where('c.isclosedclient = FALSE')
      ->addWhere('c.departments_id = cd.departments_id')
      ->addWhere('client.user_id = '.$user_id)
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->orderBy('c.createdatetime DESC') 
       ->fetchArray();
      return $q;
     }
     
     
  public function getClaimById($claimId)
  {

    if (!preg_match("/[0-9]/i", $claimId))
    {
      return false;
    }

    return Doctrine_Core::getTable('claim')
      ->createQuery('c')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.Status st')
      ->leftJoin('c.ClaimUsers cu')
      ->leftJoin('cu.Users u')
      ->leftJoin('d.ClientDepartments cd')
      ->addWhere('c.id = ?', $claimId)
      ->orderBy('c.createdatetime DESC')
      ->fetchOne();
  }

    public function getClosedClaimsForClient($paramets_holder)
    {
       $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
       
       $from_date = $paramets_holder['date_range']['from']['year'].'-'.$paramets_holder['date_range']['from']['month'].'-'.$paramets_holder['date_range']['from']['day'].' 0:0:0'; 
       $to_date = $paramets_holder['date_range']['to']['year'].'-'.$paramets_holder['date_range']['to']['month'].'-'.$paramets_holder['date_range']['to']['day'].' 23:59:59'; 
       
       $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('c.closedatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('d.added_field as departments_added_filed')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_stuff').'\'
                ),
        \', \'
        ) AS stuff')
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.ClaimUsers clus')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st')
      ->leftJoin('d.ClientDepartments cd')
      ->leftJoin('cd.Client client')
      ->where('c.isclosedclient = TRUE')
      ->addWhere('c.departments_id = cd.departments_id')
      ->addWhere('client.user_id = '.$user_id)
      ->addWhere("c.closedatetime > '$from_date'") 
      ->addWhere("c.closedatetime <'$to_date'")
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->orderBy('c.closedatetime DESC')
       ->fetchArray();
      return $q;
     }
     
     
    public function getClosedClaimsForDispatcher($paramets_holder)
    {
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      
      $from_date = $paramets_holder['date_range']['from']['year'].'-'.$paramets_holder['date_range']['from']['month'].'-'.$paramets_holder['date_range']['from']['day'].' 0:0:0'; 
      $to_date = $paramets_holder['date_range']['to']['year'].'-'.$paramets_holder['date_range']['to']['month'].'-'.$paramets_holder['date_range']['to']['day'].' 23:59:59'; 
      
       $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('c.closedatetime')
      ->addSelect('c.description')
      ->addSelect('ct.name as claimtype')
      ->addSelect('d.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = TRUE')
      ->addWhere("c.closedatetime > '$from_date'") 
      ->addWhere("c.closedatetime <'$to_date'")
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->groupBy('c.id, c.createdatetime, c.description, c.closedatetime, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id, d.mpk')
      ->orderBy('c.closedatetime DESC') 
      ->fetchArray();
      
      return $q;    
     }
    
    public function getOpenedClaimsForDispatcher()
    {
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('ct.name as claimtype')
      //->addSelect('d.name as departments_name')
      ->addSelect(' d.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 
      ->addSelect('c.description') 
      //->addSelect('st.stakey as status_key')
      //->addSelect('ci.duration as duration')
      //->addSelect('ci.critic as critic')
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
     /* ->addSelect('(SELECT MAX(lc1.createdatetime) FROM log_claim lc1 
      WHERE  
         lc1.claim_id = c.id
      ) as activiti')  */
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = FALSE')
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      //->addWhere('cu.userkey <> \''.sfConfig::get('claimuserkey_supervisor').'\'')
      ->groupBy('c.id, c.createdatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, d.mpk, st.name, i.name, i.color, c.smeta_status_id')
      ->orderBy('c.createdatetime DESC') 
      ->fetchArray();
      return $q; 
    }
    
    public function getOpenedClaimsForFinance()
    {
        return $this->getOpenedClaimsForDispatcher();
    }
    
    public function getClosedClaimsForFinance($paramets_holder)
    {
        return $this->getClosedClaimsForDispatcher($paramets_holder);
    }
    
    //todo 8: для сметы выполняется много запросов из-за статуса
    public function getOpenedClaimsForSmeta()
    {
/*       $getSmetaStatuses = Doctrine::getTable('status')->getAllSmetaStatuses();
       return Doctrine_Core::getTable('claim')
      ->createQuery('c')
      ->select('c.*, ct.name, d.mpk, d.name, cit.name, st.*, contr.id, org.name, ci.id, i.name, cu.userkey, cu.isread, i.color, u.first_name, u.last_name, fc.income_nds, fc.work')
      ->leftJoin('c.Departments d')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('d.contract contr')
      ->leftJoin('contr.organization org')
      ->leftJoin('d.City cit')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.Status st')
      ->leftJoin('c.ClaimUsers cu')
      ->leftJoin('cu.Users u')
      ->leftJoin('c.ContractImportance ci')
      ->leftJoin('ci.importance i')
      //->leftJoin('d.ClientDepartments cd')                       
      ->whereIn('c.smeta_status_id ', $getSmetaStatuses->getPrimaryKeys())
      ->addWhere('c.isclosedclient = false')
      //->addWhere('c.isclosedstuff = false')
      ->addWhere('cu.userkey <> \''.sfConfig::get('claimuserkey_supervisor').'\'') 
      //->addWhere('cu.userkey = \''.sfConfig::get('claimuserkey_client').'\'') 
      ->orderBy('c.createdatetime DESC')
      ->execute();*/ 
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('ct.name as claimtype')
      //->addSelect('d.name as departments_name')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 
      ->addSelect('c.description') 
      //->addSelect('st.stakey as status_key')
      //->addSelect('ci.duration as duration')
      //->addSelect('ci.critic as critic')
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = FALSE')
      ->addWhere('c.smeta_status_id IS NOT NULL')
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->groupBy('c.id, c.createdatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id')
      ->orderBy('c.createdatetime DESC')
      ->fetchArray();
      return $q; 
    }
    
    public function getClosedClaimsForSmeta($paramets_holder)
    {
/*       $getSmetaStatuses = Doctrine::getTable('status')->getAllSmetaStatuses();
       return Doctrine_Core::getTable('Claim')
      ->createQuery('c')
      ->select('c.*, ct.name, d.mpk, d.name, cit.name, st.*, contr.id, o.name, ci.id, i.name, cu.userkey, cu.isread, i.color, u.first_name, u.last_name, fc.income_nds, fc.work')
      ->leftJoin('c.Departments d')
      ->leftJoin('c.FinanceClaim fc') 
      ->leftJoin('d.City cit')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.Status st')
      ->leftJoin('c.ClaimUsers cu')
      ->leftJoin('cu.Users u')
      ->leftJoin('d.contract contr')
      ->leftJoin('contr.organization o')
      ->leftJoin('c.ContractImportance ci')
      ->leftJoin('ci.importance i')
      ->whereIn('c.smeta_status_id ', $getSmetaStatuses->getPrimaryKeys())
      //->leftJoin('d.ClientDepartments cd') 
      ->addWhere('c.isclosedclient = true')
      ->addWhere('cu.userkey = \''.sfConfig::get('claimuserkey_client').'\'')
      ->orderBy('c.closedatetime DESC')
      ->execute();    */
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      
      $from_date = $paramets_holder['date_range']['from']['year'].'-'.$paramets_holder['date_range']['from']['month'].'-'.$paramets_holder['date_range']['from']['day'].' 0:0:0'; 
      $to_date = $paramets_holder['date_range']['to']['year'].'-'.$paramets_holder['date_range']['to']['month'].'-'.$paramets_holder['date_range']['to']['day'].' 23:59:59'; 
      
      
       $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('c.closedatetime')
      ->addSelect('c.description')
      ->addSelect('ct.name as claimtype')
      ->addSelect('d.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = TRUE')
      ->addWhere('c.smeta_status_id IS NOT NULL')
      ->addWhere("c.closedatetime > '$from_date'") 
      ->addWhere("c.closedatetime <'$to_date'")
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->groupBy('c.id, c.createdatetime, c.description, c.closedatetime, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id, d.mpk')
      ->orderBy('c.closedatetime DESC')
      ->fetchArray();
      return $q; 
    }
    
    
    
    public function getOpenedClaimsForKurator()
    {
       $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('c.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 

      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
        ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.ClaimUsers clus')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = FALSE')
      ->addWhere('clus.userkey = ?',sfConfig::get('claimuserkey_kurator'))
      ->andWhere('clus.user_id = ?',$user_id)
      //->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->groupBy('c.id, c.createdatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id, c.mpk')
      ->orderBy('c.createdatetime DESC')
      ->fetchArray();
      return $q;
    }

  public function getOpenedLocalClaimsForKurator()
  {
    $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
    $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('c.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff')

      ->addSelect('
      array_to_string(
        ARRAY (SELECT
                   fcc.work
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id
                ),
        \'-*;*-\'
        ) AS worklist')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread)
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'
      ) as is_not_read')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name)
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name)
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.ClaimUsers clus')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st')
      ->where('c.isclosedclient = FALSE')
      ->addWhere('clus.userkey = ?',sfConfig::get('claimuserkey_kurator'))
      ->andWhere('clus.user_id = ?',$user_id)
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__LOCAL_ID)
      ->groupBy('c.id, c.createdatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id, c.mpk')
      ->orderBy('c.createdatetime DESC')
      ->fetchArray();
    return $q;
  }
    
    public function getClosedClaimsForKurator($paramets_holder)
    {
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      
      $from_date = $paramets_holder['date_range']['from']['year'].'-'.$paramets_holder['date_range']['from']['month'].'-'.$paramets_holder['date_range']['from']['day'].' 0:0:0'; 
      $to_date = $paramets_holder['date_range']['to']['year'].'-'.$paramets_holder['date_range']['to']['month'].'-'.$paramets_holder['date_range']['to']['day'].' 23:59:59'; 
      
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('c.closedatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('c.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 

      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
        ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.ClaimUsers clus')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = TRUE')
      ->addWhere('clus.userkey = ?',sfConfig::get('claimuserkey_kurator'))
      ->andWhere('clus.user_id = ?',$user_id)
      ->addWhere("c.closedatetime > '$from_date'") 
      ->addWhere("c.closedatetime <'$to_date'")
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->groupBy('c.id, c.createdatetime, c.closedatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id, c.mpk')
      ->orderBy('c.closedatetime DESC')
      ->fetchArray();
      return $q;
    }
    
    public function getOpenedClaimsForStuff()
    {
       $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('c.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 

      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
        ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.ClaimUsers clus')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = FALSE')
      ->addWhere('clus.userkey = ?',sfConfig::get('claimuserkey_stuff'))
      ->andWhere('clus.user_id = ?',$user_id)
      //->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->groupBy('c.id, c.createdatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id, c.mpk')
      ->orderBy('c.createdatetime DESC')
      ->fetchArray();
      return $q; 
    }
    
    
    
    
    public function getClosedClaimsForStuff($paramets_holder)
    {
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      
      $from_date = $paramets_holder['date_range']['from']['year'].'-'.$paramets_holder['date_range']['from']['month'].'-'.$paramets_holder['date_range']['from']['day'].' 0:0:0'; 
      $to_date = $paramets_holder['date_range']['to']['year'].'-'.$paramets_holder['date_range']['to']['month'].'-'.$paramets_holder['date_range']['to']['day'].' 23:59:59'; 
      
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('c.closedatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('c.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 

      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
        ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.ClaimUsers clus')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = TRUE')
      ->addWhere('clus.userkey = ?',sfConfig::get('claimuserkey_stuff'))
      ->andWhere('clus.user_id = ?',$user_id)
      ->addWhere("c.closedatetime > '$from_date'") 
      ->addWhere("c.closedatetime <'$to_date'")
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      ->groupBy('c.id, c.createdatetime, c.closedatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id, c.mpk')
      ->orderBy('c.closedatetime DESC')

      ->fetchArray();
      return $q;
    }
   

    public function getOpenedClaimsForSupervisor()
    {
        return $this->getOpenedClaimsForDispatcher();
    }

    public function getClosedClaimsForSupervisor($paramets_holder)
    {
        return $this->getClosedClaimsForDispatcher($paramets_holder);
    }
    
    public function getOpenedFinanceClaimsForDispatcher()
    {
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('ct.name as claimtype')
      //->addSelect('d.name as departments_name')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 
      ->addSelect('c.isclosedclient') 
      ->addSelect('c.description') 
      //->addSelect('st.stakey as status_key')
      //->addSelect('ci.duration as duration')
      //->addSelect('ci.critic as critic')
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
     /* ->addSelect('(SELECT MAX(lc1.createdatetime) FROM log_claim lc1 
      WHERE  
         lc1.claim_id = c.id
      ) as activiti')  */
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedstuff = FALSE')
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__NETWORK_ID)
      //->addWhere('cu.userkey <> \''.sfConfig::get('claimuserkey_supervisor').'\'')
      ->groupBy('c.id, c.createdatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, st.name, i.name, i.color, c.smeta_status_id, c.isclosedclient')
      ->orderBy('c.createdatetime DESC') 
      ->fetchArray();
      return $q; 
    }

    
    public function getOpenedOnceClaimsForDispatcher()
    {
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('d.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 
      ->addSelect('c.description') 
      //->addSelect('st.stakey as status_key')
      //->addSelect('ci.duration as duration')
      //->addSelect('ci.critic as critic')
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
     /* ->addSelect('(SELECT MAX(lc1.createdatetime) FROM log_claim lc1 
      WHERE  
         lc1.claim_id = c.id
      ) as activiti')  */
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = FALSE')
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__ONCE_ID)
      //->addWhere('cu.userkey <> \''.sfConfig::get('claimuserkey_supervisor').'\'')
      ->groupBy('c.id, c.createdatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.mpk, d.address, st.name, i.name, i.color, c.smeta_status_id')
      ->orderBy('c.createdatetime DESC') 
      ->fetchArray();
      return $q; 
    }
    
    public function getOpenedLocalClaimsForDispatcher()
    {
      $user_id = sfContext::getInstance()->getUser()->getAttribute('user_id',null, 'sfGuardSecurityUser');
      $q = Doctrine_Query::create()
      ->select('c.id')
      ->addSelect('c.createdatetime')
      ->addSelect('ct.name as claimtype')
      ->addSelect('d.mpk as mpk')
      ->addSelect('CONCAT(CONCAT(cit.name, \' | \'), d.address) as departments_address')
      ->addSelect('org.name as organization_name')
      ->addSelect('i.name as importance_name')
      ->addSelect('i.color as importance_color')
      ->addSelect('st.name as status')
      ->addSelect('(SELECT st1.name FROM STATUS st1 WHERE st1.id = c.smeta_status_id) as smeta_status')
      ->addSelect('SUM(fc.income_nds) as total_income')
      ->addSelect('c.isclosedstuff') 
      ->addSelect('c.description') 
      //->addSelect('st.stakey as status_key')
      //->addSelect('ci.duration as duration')
      //->addSelect('ci.critic as critic')
      ->addSelect('
      array_to_string(
        ARRAY (SELECT 
                   fcc.work 
                FROM
                  finance_claim fcc
                WHERE
                   fcc.claim_id = c.id 
                ),
        \'-*;*-\'
        ) AS worklist')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u.last_name, \' \'), u.first_name) 
                FROM sfGuardUser u,
                   u.ClaimUsers cu
                WHERE
                   cu.claim_id = c.id AND
                   cu.userkey = \''.sfConfig::get('claimuserkey_kurator').'\'
                ),
        \', \'
        ) AS kurator')
      ->addSelect('
      array_to_string(
        ARRAY   (
                SELECT 
                   CONCAT(CONCAT(u1.last_name, \' \'), u1.first_name) 
                FROM sfGuardUser u1,
                   u1.ClaimUsers cu1
                WHERE
                   cu1.claim_id = c.id AND
                   cu1.userkey = \''.sfConfig::get('claimuserkey_client').'\'
                ),
        \', \'
        ) AS client')
      ->addSelect('
      (SELECT BOOL_AND(cui.isread) 
      FROM
          ClaimUsers cui
      WHERE
        cui.claim_id = c.id AND
        cui.user_id = '.$user_id.'  
      ) as is_not_read')
     /* ->addSelect('(SELECT MAX(lc1.createdatetime) FROM log_claim lc1 
      WHERE  
         lc1.claim_id = c.id
      ) as activiti')  */
      ->from('claim c')
      ->leftJoin('c.Claimtype ct')
      ->leftJoin('c.FinanceClaim fc')
      ->leftJoin('c.Departments d')
      ->leftJoin('d.City cit')
      ->leftJoin('d.Organization org')
      ->leftJoin('c.OrganizationImportance ci')
      ->leftJoin('ci.Importance i')
      ->leftJoin('c.Status st') 
      ->where('c.isclosedclient = FALSE')
      ->addWhere('c.organization_type_id = ?', OrganizationType::TYPE__LOCAL_ID)
      //->addWhere('cu.userkey <> \''.sfConfig::get('claimuserkey_supervisor').'\'')
      ->groupBy('c.id, c.createdatetime, c.description, c.isclosedstuff, ct.name, cit.name, org.name, d.address, d.mpk, st.name, i.name, i.color, c.smeta_status_id')
      ->orderBy('c.createdatetime DESC') 
      ->fetchArray();
      return $q; 
    }
   
  static public function getUnreadClaims($limit = 10)  
  {
    $user_id = sfContext::getInstance()->getUser()->getId();
    
    $claimIds = claimusersTable::getInstance()
      ->createQuery()
      ->select('claim_id')
      ->where('user_id = ?', $user_id)
      ->addWhere('isread =?', false)
      ->fetchArray();
      
    if (!sizeof($claimIds))
    {
      return array();
    }
    
    $claimIds = GlobalFunctions::getFormattedArray($claimIds, 'claim_id');
      
    $messages = claimTable::getInstance()
      ->createQuery('c')
      ->select('c.id')
      ->addSelect('
      (SELECT 
        CONCAT(CONCAT(com.user_id, \'--||--\'), com.createdatetime)
          from 
            comments com 
          where 
            com.claim_id = c.id 
          order by com.id desc 
          limit 1) 
      as message')
      ->whereIn('c.id', $claimIds)
      ->orderBy('c.id DESC')
      ->execute();
      
    return $messages;
  }
}
