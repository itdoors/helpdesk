<?php

/**
 * DepartmentPeople
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class DepartmentPeople extends BaseDepartmentPeople
{
  /** @var Individual $individualInfo */
  public $individualInfo;

  /** @var DepartmentPeopleMonthInfo $monthInfo */
  public $monthInfo;

  /** @var int $paramYear */
  public $paramYear;
  /** @var int $paramMonth */
  public $paramMonth;
  /** @var int $paramReplacementId */
  public $paramReplacementId;
  /** @var string $paramReplacementId */
  public $paramReplacementType;

  const REPLACEMENT_TYPE_REPLACEMENT = 'r';
  const REPLACEMENT_TYPE_SUBSTITUTION = 's';
  /*public function __construct($year = null, $month = null)
  {
    // $this->setYearMonth($year, $month);
    parent::construct();
  }*/

  /**
   * Returns self instance
   *
   * @return DepartmentPeople
   */
  public function getItself()
  {
    return $this;
  }

  public function __toString()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    if ($monthInfo)
    {
      if ($replacementId = $monthInfo->getDepartmentPeopleReplacementId())
      {
        /** @var DepartmentPeople $replacement */
        $replacement = Doctrine::getTable('DepartmentPeople')->find($replacementId);

        if ($replacement)
        {
          return $replacement->getFullName();
        }
      }
    }

    return $this->getFullName();
  }

  /**
   * Sets individualInfo record
   *
   * @param Individual $individualInfo
   */
  public function setIndividualInfo($individualInfo)
  {
    $this->individualInfo = $individualInfo;
  }

  /**
   * Returns individualInfo record
   *
   * @return Individual
   */
  public function getIndividualInfo()
  {
    if ($this->individualInfo)
    {
      return $this->individualInfo;
    }

    $this->individualInfo = $this->getIndividual();

    $this->individualInfo = !is_null($this->individualInfo) ? $this->individualInfo : new Individual();

    return $this->individualInfo;
  }

  /**
   * Get full name
   */
  public function getFullName()
  {
    $i18n = sfContext::getInstance()->getI18N();

    $individualInfo = $this->getIndividualInfo();

    if ($individualInfo && ($individualInfo->getLastName() || $individualInfo->getFirstName() || $individualInfo->getMiddleName()))
    {
      $mpk = $this->getMpk();

      $mpk = $mpk ? ' ('.$mpk.')' : '';

      return  $individualInfo->getLastName() . ' ' .
              $individualInfo->getFirstName() . ' ' .
              $individualInfo->getMiddleName() .
              $mpk;
    }

    // Temp information. delete when dev-grafik will be merged with master
    if (sfContext::getInstance()->getUser()->hasCredential('admin')) {
      $id = $this->getId();
      $fullName = $this->_data['last_name'] . ' ' . $this->_data['first_name'] . ' ' . $this->_data['middle_name'];
      return $i18n->__('No individual data') . "({$id} {$fullName})";
    }
    // EOF Temp information

    return $i18n->__('No individual data');
  }

  /**
   * Get full name
   */
  public function getDrfo()
  {
    $individualInfo = $this->getIndividualInfo();

    $data = $individualInfo->getTin();

    return $data ? $data : 'No individual data';
  }

  /**
   * Get full name
   */
  public function getTin()
  {
    $individualInfo = $this->getIndividualInfo();

    $data = $individualInfo->getTin();

    return $data ? $data : 'No individual data';
  }

  /**
   * Get first name
   */
  public function getFirstName()
  {
    $individualInfo = $this->getIndividualInfo();

    $data = $individualInfo->getFirstName();

    return $data ? $data : 'No individual data';
  }

  /**
   * Get first name
   */
  public function getLastName()
  {
    $individualInfo = $this->getIndividualInfo();

    $data = $individualInfo->getLastName();

    return $data ? $data : 'No individual data';
  }

  /**
   * Get middle name
   */
  public function getMiddleName()
  {
    $individualInfo = $this->getIndividualInfo();

    $data = $individualInfo->getMiddleName();

    return $data ? $data : 'No individual data';
  }

  /**
   * Get birthday
   */
  public function getBirthday()
  {
    $individualInfo = $this->getIndividualInfo();

    $data = $individualInfo->getBirthday();

    return $data ? $data : 'No individual data';
  }

  /**
   * Get passport
   */
  public function getPassport()
  {
    $individualInfo = $this->getIndividualInfo();

    $data = $individualInfo->getPassport();

    return $data ? $data : 'No individual data';
  }

  /**
   * Get address
   */
  public function getAddress()
  {
    $individualInfo = $this->getIndividualInfo();

    $data = $individualInfo->getAddress();

    return $data ? $data : 'No individual data';
  }

  /**
   * Sets monthInfo
   *
   * @param DepartmentPeopleMonthInfo $monthInfo
   */
  public function setMonthInfo($monthInfo)
  {
    $this->monthInfo = $monthInfo;
  }

  public function setYearMonth($year = null, $month = null)
  {
    $this->setParamYear($year);
    $this->setParamMonth($month);
    $this->setParamReplacementId(0);
  }

  public function setYearMonthReplacement($year = null, $month = null, $replacementId = 0, $replacementType = self::REPLACEMENT_TYPE_REPLACEMENT)
  {
    $this->setYearMonth($year, $month);
    $this->setParamReplacementId($replacementId);
    $this->setParamReplacementType($replacementType);
  }

  public function setParamYear($year = null)
  {
    $this->paramYear = $year ? $year : date('Y');
  }

  public function setParamMonth($month = null)
  {
    $this->paramMonth = $month ? $month : date('n');
  }

  public function setParamReplacementId($replacementId = 0)
  {
    $this->paramReplacementId = $replacementId;
  }

  public function setParamReplacementType($replacementType = self::REPLACEMENT_TYPE_REPLACEMENT)
  {
    $this->paramReplacementType = $replacementType;
  }

  /**
   * Get month info
   */
  public function getMonthInfo()
  {
    if ($this->monthInfo)
    {
      return $this->monthInfo;
    }

    if (!$this->paramYear || !$this->paramMonth)
    {
      // throw new Exception('No month || year info for department people', 406);
      return null;
    }

    if (!$this->paramReplacementId)
    {
      $this->paramReplacementId = 0;
    }

    $monthInfo = Doctrine::getTable('DepartmentPeopleMonthInfo')
      ->createQuery('dpmi')
      ->where('dpmi.year = ?', $this->paramYear)
      ->addWhere('dpmi.month = ?', $this->paramMonth)
      ->addWhere('dpmi.replacement_type = ?', $this->paramReplacementType)
      ->addWhere('dpmi.department_people_id = ?', $this->getId())
      ->addWhere('dpmi.department_people_replacement_id = ?', $this->paramReplacementId)
      ->fetchOne();

    $this->monthInfo = $monthInfo;

    return $this->monthInfo;
  }

   public function delete(Doctrine_Connection $conn = null)
   {
     Grafik::deletePeopleInfo($this->getYear(), $this->getMonth(), $this->getDepartmentId(), $this->getId());
     
     parent::delete($conn);
   }
   
   static public function getPermanentStaffTypeId()
   {
     $q = Doctrine_Core::getTable('lookup')
        ->createQuery('l')
        ->where('l.lukey = ?', 'department_people_type_permanent') 
        ->fetchOne();
        return $q ? $q->getId() : null;
   }
   
  public function copyGrafikFromPreviousMonth($newPerson, $person, $previous_year, $previous_month, $year, $month)
  {
    /*$firstGrafikInfoFromPreviousMonth = $person->getFirstGrafikInfo($previous_year, $previous_month);
    
    $firstWorkDay = Grafik::getFirstWorkDay($year, $month);
    
    if (!$firstGrafikInfoFromPreviousMonth)
    {
      return;
    }
    
    $newGrafik = $firstGrafikInfoFromPreviousMonth->copy();
    $newGrafik->setDepartmentPeopleId($newPerson->getId());
    $newGrafik->setYear($year);
    $newGrafik->setMonth($month);
    $newGrafik->setDay($firstWorkDay);
    $newGrafik->save();
    
    $newGrafik->toEndOfTheMonth();*/


    $paramsPrev = array(
      'year' => $previous_year,
      'month' => $previous_month,
      'department_id' => $person->getDepartmentId(),
      'department_people_id' => $person->getId()
    );

    $paramsNext = $paramsPrev;
    $paramsNext['month'] = $month;
    $paramsNext['year'] = $year;
    $paramsNext['department_people_id'] = $newPerson->getId();

    $prWorkingDays = Grafik::getWorkingDaysArray($paramsPrev);
    $nextWorkingDays = Grafik::getWorkingDaysArray($paramsNext);
    $mergeWorkingDays = Grafik::mergeWorkingDays($prWorkingDays, $nextWorkingDays);

    foreach ($mergeWorkingDays as $prevDay => $nextDay)
    {
      $fromParams = $paramsPrev;
      $fromParams['day'] = $prevDay;

      $toParams = $paramsNext;
      $toParams['day'] = $nextDay;

      Grafik::copyWorkingDay($fromParams , $toParams);
    }

  }

  public function getFirstGrafikInfo($year, $month)
  {
    $grafik = Doctrine::getTable('Grafik')
      ->createQuery('g')
      ->where('g.department_id = ? ',$this->getDepartmentId())
      ->addWhere('g.department_people_id = ?', $this->getId())
      ->addWhere('g.year = ?', $year)
      ->addWhere('g.month = ?', $month)
      ->orderBy('g.day')
      ->execute();
      
    $result = null;
    
    foreach($grafik as $grafik_day)
    {
      if ($grafik_day->isPersonWorkedThisDay())
      {
        $result = $grafik_day;
        break;
      }
    }
    
    return $result;
  }

  public function rePosition()
  {
    $rePositionList = DepartmentPeoplePosition::$rePositionList;

    $positionString = $this->getPositionString();

    if (isset($rePositionList[$positionString]) && $rePositionList[$positionString])
    {
      $positionId = $rePositionList[$positionString];

      $this->setPositionId($positionId);
      $this->save();
    }
  }

  /**
   * Reloads getEmploymentTypeId from Month Info
   */
  public function getEmploymentTypeId()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getEmploymentTypeId() : null;
  }

  /**
   * Reloads TypeId from Month Info
   */
  public function getTypeId()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getTypeId() : null;
  }

  /**
   * Reloads Bonus from Month Info
   */
  public function getBonus()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getBonus() : null;
  }

  /**
   * Reloads Fine from Month Info
   */
  public function getFine()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getFine() : null;
  }

  /**
   * Reloads FineFloat from Month Info
   */
  public function getFineFloat()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getFineFloat() : null;
  }

  /**
   * Reloads Salary from Month Info
   */
  public function getSalary()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getSalary() : null;
  }

  /**
   * Reloads NormaDays from Month Info
   */
  public function getNormaDays()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getNormaDays() : null;
  }

  /**
   * Reloads IsCleanSalary from Month Info
   */
  public function getIsCleanSalary()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getIsCleanSalary() : null;
  }

  /**
   * Reloads getEmploymentTypeChar from Month Info
   */
  public function getEmploymentTypeChar()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getEmploymentTypeChar() : null;
  }

  /**
   * Reloads getSurchargeTypeChar from Month Info
   */
  public function getSurchargeTypeChar()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getSurchargeTypeChar() : null;
  }

  /**
   * Reloads getSurchargeTypeChar from Month Info
   */
  public function getBonusTypeChar()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getBonusTypeChar() : null;
  }

  /**
   * Reloads getSurchargeTypeChar from Month Info
   */
  public function getFineTypeChar()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getFineTypeChar() : null;
  }

  /**
   * Reloads getSurchargeTypeChar from Month Info
   */
  public function getSurchargeString()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getSurchargeString() : null;
  }

  /**
   * Reloads getSurchargeTypeChar from Month Info
   */
  public function getBonusString()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getBonusString() : null;
  }

  /**
   * Reloads getSurchargeTypeChar from Month Info
   */
  public function getFineString()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getFineString() : null;
  }

  /**
   * Reloads getEmploymentTypeLukey from Month Info
   */
  public function getEmploymentTypeLukey()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getEmploymentTypeLukey() : null;
  }

  /**
   * Reloads getTypeLukey from Month Info
   */
  public function getTypeLukey()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getTypeLukey() : null;
  }

  /**
   * Reloads getTypeChar from Month Info
   */
  public function getTypeChar()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getTypeChar() : null;
  }

  /**
   * Reloads getBonusFloat from Month Info
   */
  public function getBonusFloat()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getBonusFloat() : null;
  }

  /**
   * Reloads getRealSalary from Month Info
   */
  public function getRealSalary()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getRealSalary() : null;
  }

  /**
   * Reloads getRealSalary from Month Info
   */
  public function getReplacementId()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getDepartmentPeopleReplacementId() : 0;
  }

  /**
   * Reloads getReplacementType from Month Info
   */
  public function getReplacementType()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getReplacementType() : self::REPLACEMENT_TYPE_REPLACEMENT;
  }

  /**
   * Reloads getSurcharge from Month Info
   */
  public function getSurcharge()
  {
    /** @var DepartmentPeopleMonthInfo $monthInfo */
    $monthInfo = $this->getMonthInfo();

    return $monthInfo ? $monthInfo->getSurcharge() : 0;
  }

  /**
   * Process person info to month info table
   *
   * @param DepartmentPeople $person
   * @param int $forceReinsert
   * @param sfBaseTask $task
   * @return DepartmentPeopleMonthInfo
   */
  public static function processPersonMonthInfo($person, $forceReinsert, $task)
  {
    $parentId = $person->getParentId() ? $person->getParentId() : $person->getId();

    $query = Doctrine::getTable('DepartmentPeopleMonthInfo')
      ->createQuery('mi')
      ->where('mi.department_people_id = ?', $parentId)
      ->addWhere('mi.year = ?', $person->getYear())
      ->addWhere('mi.month = ?', $person->getMonth());

    $monthInfo = $query->fetchOne();

    if ($monthInfo && !$forceReinsert)
    {
      if ($task)
      {
        $task->logSection(' Already exist person :', '#' . $person->getId() . ' - ' . $person->getName(), null, 'ERROR');
      }

      return 0;
    }

    /*if ($task)
    {
      $task->logSection(' Processing person :', '#' . $person->getId() . ' - ' . $person->getName());
    }*/

    if (!$monthInfo)
    {
      $monthInfo = new DepartmentPeopleMonthInfo();
    }

    $monthInfo->setDepartmentPeopleId($parentId);
    $monthInfo->setYear($person->_data['year']);
    $monthInfo->setMonth($person->_data['month']);
    $monthInfo->setBonus($person->_data['bonus']);
    $monthInfo->setFine($person->_data['fine']);
    $monthInfo->setPositionId($monthInfo->_data['position_id']);
    $monthInfo->setEmploymentTypeId($person->_data['employment_type_id']);
    $monthInfo->setSalaryTypeId($person->_data['salary_type_id']);
    $monthInfo->setSalary(floatval($person->_data['salary']));
    $monthInfo->setTypeId($person->_data['type_id']);
    $monthInfo->setTypeString($person->_data['type_string']);
    $monthInfo->setIsCleanSalary($person->_data['is_clean_salary']);
    $monthInfo->setNormaDays($person->_data['norma_days']);

    $monthInfo->save();

    return $monthInfo;
  }

  /**
   * Processes Month Info All month
   *
   * @param DepartmentPeople $person
   */
  public static function processPersonMonthInfoAll($person)
  {
    $parentId = $person->getParentId();

    $monthInfos = Doctrine::getTable('DepartmentPeopleMonthInfo')
      ->createQuery('dpmi')
      ->where('dpmi.department_people_id = ?', $person->getId())
      //->addWhere('dpmi.department_people_replacement_id = ?', $person->getReplacementId())
      ->execute();

    /** @var DepartmentPeopleMonthInfo[]|Doctrine_Collection $monthInfos*/
    foreach ($monthInfos as $monthInfo)
    {
      $parent = $person->getParent();

      $parentInfo = Doctrine::getTable('DepartmentPeopleMonthInfo')
        ->createQuery('mi')
        ->where('mi.department_people_id = ?', $parentId)
        ->addWhere('mi.department_people_replacement_id = ?', $monthInfo->getDepartmentPeopleReplacementId())
        ->addWhere('mi.year = ?', $monthInfo->getYear())
        ->addWhere('mi.month = ?', $monthInfo->getMonth())
        ->fetchOne();

      if (!$parentInfo)
      {
        $parentInfo = new DepartmentPeopleMonthInfo();
      }

      $parentInfo->setDepartmentPeopleId($parentId);
      $parentInfo->setDepartmentPeopleReplacementId($monthInfo->getDepartmentPeopleReplacementId());
      $parentInfo->setYear($monthInfo->_data['year']);
      $parentInfo->setMonth($monthInfo->_data['month']);
      $parentInfo->setBonus($monthInfo->_data['bonus']);
      $parentInfo->setFine($monthInfo->_data['fine']);
      $parentInfo->setPositionId($monthInfo->_data['position_id']);
      $parentInfo->setEmploymentTypeId($monthInfo->_data['employment_type_id']);
      $parentInfo->setSalaryTypeId($monthInfo->_data['salary_type_id']);
      $parentInfo->setSalary(floatval($monthInfo->_data['salary']));
      $parentInfo->setTypeId($monthInfo->_data['type_id']);
      $parentInfo->setTypeString($monthInfo->_data['type_string']);
      $parentInfo->setIsCleanSalary($monthInfo->_data['is_clean_salary']);
      $parentInfo->setNormaDays($monthInfo->_data['norma_days']);

      $parentInfo->save();
    }

    self::processPersonMonthInfoAllReplacement($person);
  }

  /**
   * Processes parent in month info in person id was in replacement_id
   *
   * @param DepartmentPeople $person
   */
  public static function processPersonMonthInfoAllReplacement($person)
  {
    $conn = Doctrine_Manager::getInstance()->connection();

    // @todo people ids must count from DepartmentPeopleMonthInfo
    $query = "
      update
        department_people_month_info
      set
        department_people_replacement_id = :parent_id
      where
        department_people_replacement_id = :id and not
        exists (
          select
            1
          from
            department_people_month_info dpmi
          where
            dpmi.year=department_people_month_info.year and
            dpmi.month = department_people_month_info.month and
            dpmi.department_people_id = department_people_month_info.department_people_id and
            dpmi.department_people_replacement_id = :parent_id)";

    $stmt = $conn->prepare($query);

    $params = array(
      ':id' => $person->getId(),
      ':parent_id' => $person->getParentId(),
    );

    $stmt->execute($params);
  }

  /**
   * Processes all parent data in month info, grafik, grafik time
   *
   * @param DepartmentPeople $person
   * @param bool $oneRecord where we set parent_id from UI (переназначение сотрудника)
   * @param sfBaseTask $task
   */
  public static function processParent($person, $task, $oneRecord = true)
  {
    if ($task)
    {
      $task->logSection('  Process parent: '," # ".$person->getId() . ' - ' . $person->getFullName());
    }

    // Process month info
    if ($oneRecord)
    {
      self::processPersonMonthInfo($person, 1, $task);
    }
    else
    {
      self::processPersonMonthInfoAll($person);
    }


    // Process grafik
    self::processPersonGrafik($person, $task);

    // Process grafik
    self::processPersonGrafikTime($person, $task);
  }

  /**
   * Processes grafik
   *
   * @param DepartmentPeople $person
   * @param sfBaseTask $task
   */
  public static function processPersonGrafik($person, $task)
  {
    $conn = Doctrine_Manager::getInstance()->connection();

    // @todo people ids must count from DepartmentPeopleMonthInfo
    $query = "
      update
        grafik
      set
        department_people_id = :parent_id
      where
        department_people_id = :id and not
        exists (
          select
            1
          from
            grafik gt
          where
            gt.year=grafik.year and
            gt.month = grafik.month and
            gt.day = grafik.day and
            gt.department_people_id = :parent_id)";

    $stmt = $conn->prepare($query);

    $params = array(
      ':id' => $person->getId(),
      ':parent_id' => $person->getParentId(),
    );

    $stmt->execute($params);

    // Replacement info update!!!
    $query = "
      update
        grafik
      set
        department_people_replacement_id = :parent_id
      where
        department_people_replacement_id = :id and not
        exists (
          select
            1
          from
            grafik gt
          where
            gt.year=grafik.year and
            gt.month = grafik.month and
            gt.day = grafik.day and
            gt.department_people_id = grafik.department_people_id and
            gt.department_people_replacement_id = :parent_id)";

    $stmt = $conn->prepare($query);

    $params = array(
      ':id' => $person->getId(),
      ':parent_id' => $person->getParentId(),
    );

    $stmt->execute($params);
  }

  /**
   * Processes grafik time
   *
   * @param DepartmentPeople $person
   * @param sfBaseTask $task
   */
  public static function processPersonGrafikTime($person, $task)
  {
    $conn = Doctrine_Manager::getInstance()->connection();

    // @todo people ids must count from DepartmentPeopleMonthInfo
    $query = "
      update
        grafik_time
      set
        department_people_id = :parent_id
      where
        department_people_id = :id and not
        exists (
          select
            1
          from
            grafik_time gt
          where
            gt.year=grafik_time.year and
            gt.month = grafik_time.month and
            gt.day = grafik_time.day and
            gt.department_people_id = :parent_id)";

    $stmt = $conn->prepare($query);

    $params = array(
      ':id' => $person->getId(),
      ':parent_id' => $person->getParentId(),
    );

    $stmt->execute($params);

    // Replacement info update!!!
    $query = "
      update
        grafik_time
      set
        department_people_replacement_id = :parent_id
      where
        department_people_replacement_id = :id and not
        exists (
          select
            1
          from
            grafik_time gt
          where
            gt.year=grafik_time.year and
            gt.month = grafik_time.month and
            gt.day = grafik_time.day and
            gt.department_people_id = grafik_time.department_people_id and
            gt.department_people_replacement_id = :parent_id)";

    $stmt = $conn->prepare($query);

    $params = array(
      ':id' => $person->getId(),
      ':parent_id' => $person->getParentId(),
    );

    $stmt->execute($params);
  }

  /**
   * Returns base getEmploymentTypeId
   */
  public function getBaseEmploymentTypeId()
  {
    return $this->_data['employment_type_id'];
  }

  public function getBaseEmploymentTypeLukey()
  {
    $lookup = lookup::getDataLukey();

    $employment_type_lukey = isset($lookup[$this->getBaseEmploymentTypeId()]) ? $lookup[$this->getBaseEmploymentTypeId()] : '';

    return $employment_type_lukey;
  }

  public function getBaseEmploymentTypeChar()
  {
    $employment_type_lukey = $this->getBaseEmploymentTypeLukey();

    $char = '';

    switch ($employment_type_lukey)
    {
      case lookup::EMPLOYMENT_TYPE_A:
        $char = 'A';
        break;
      case lookup::EMPLOYMENT_TYPE_B:
        $char = 'B';
        break;
      case lookup::EMPLOYMENT_TYPE_C:
        $char = 'C';
        break;
      case lookup::EMPLOYMENT_TYPE_D:
        $char = 'D';
        break;
      case lookup::EMPLOYMENT_TYPE_E:
        $char = 'E';
        break;
    }

    return $char;
  }

  /**
   * Get base salary from department_people table
   */
  public function getBaseSalary()
  {
    return $this->_data['salary'];
  }

  /**
   * Is official depending on number && admission_date && dismissal_date
   *
   * @return bool
   */
  public function isOfficial()
  {
    if ($this->getTypeLukey() == Lookup::EMPLOYMENT_TYPE_A) {
      return true;
    }

    if ($this->getNumber()) {
      return true;
    }

    if (!$this->getAdmissionDate()) {
      return false;
    }

    if ($this->getDismissalDate() && $this->getDismissalDate() < date('Y-m-d')) {
      return false;
    }

    if (date('Y-m-d') > $this->getAdmissionDate()) {
      return true;
    }

    return false;
  }
}

