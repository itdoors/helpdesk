<?php

/**
 * Queue
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Queue extends PluginQueue
{
  const MODEL__GRAFIK = 'grafik';
  const SUBMODEL__GRAFIK_COPY_ALL = 'copyAll';
  const SUBMODEL__GRAFIK_EXPORT_EXCEL_ALL = 'exportExcelAll';

  const STATUS__NEW = 'new';
  const STATUS__PROCEED = 'proceed';
  const STATUS__DONE = 'done';

  public function save(Doctrine_Connection $conn = null)
  {
    $isNew = $this->isNew();

    parent::save($conn);

    if ($isNew)
    {
      $userId = null;

      if (GlobalFunctions::isBrowser())
      {
        $userId = GlobalFunctions::getUserId();
      }

      $this->addToLog($userId);
    }
  }

  /**
   * Add to queue
   *
   * @param string $objectModel
   * @param mixed $params
   * @param string $objectSubmodel
   * @param string $objectId
   * @return Queue
   */
  static public function addItem(
    $objectModel = self::MODEL__GRAFIK,
    $params = array(),
    $objectSubmodel = null,
    $objectId = null
  )
  {
    if (!$objectId)
    {
      $objectClass = ucfirst($objectModel);
      $objectMethod = 'QueueGenerate' . ($objectSubmodel ? ucfirst($objectSubmodel) : '') . 'Id';


      if (method_exists($objectClass, $objectMethod))
      {
        $objectId = call_user_func_array(array($objectClass, $objectMethod), array($params));
      }
    }

    $encodedParams = json_encode($params);

    $queue = new Queue();
    $queue->setObjectModel($objectModel);
    $queue->setObjectSubmodel($objectSubmodel);
    $queue->setObjectId($objectId);
    $queue->setParams($encodedParams);
    $queue->setStatus(self::STATUS__NEW);
    $queue->setCreatedatetime(date('Y-m-d H:i:s'));
    $queue->save();

    return $queue;
  }

  /**
   * Get queue by id. Id wil be generated by params
   *
   * @param string $objectModel
   * @param mixed[] $params
   * @param string $objectSubmodel
   * @return Queue
   */
  static public function getByModelAndId($objectModel = self::MODEL__GRAFIK, $params = array(), $objectSubmodel = '')
  {
    $objectClass = ucfirst($objectModel);
    $objectMethod = 'QueueGenerate' . ($objectSubmodel ? ucfirst($objectSubmodel) : '') . 'Id';
    $objectId = null;

    if (method_exists($objectClass, $objectMethod))
    {
      $objectId = call_user_func_array(array($objectClass, $objectMethod), array($params));
    }

    // @todo get instance by encoded params
    if (!$objectId)
    {
      return;
    }

    $queue = Doctrine::getTable('Queue')
      ->createQuery('q')
      ->where('q.object_model = ?', $objectModel)
      ->addWhere('q.object_id = ?', $objectId)
      ->fetchOne();

    return $queue;
  }

  /**
   * Proceed queue. Proceed, set status proceed, set percent, delete
   *
   * @param queueTask $queueTask
   * @throws
   */
  public function proceed(queueTask $queueTask)
  {
    $this->setStatus(self::STATUS__PROCEED);
    $this->save();

    $objectClass = ucfirst($this->getObjectModel());
    $objectSubmodel = $this->getObjectSubmodel();
    $objectMethod = 'Queue' . ($objectSubmodel ? ucfirst($objectSubmodel) : '') . 'Proceed';

    $params = $this->getParams() ? json_decode($this->getParams()) : array();

    if (method_exists($objectClass, $objectMethod))
    {
      $queueTable = doctrine::getTable('queue');
      $con = $queueTable->getConnection();
      try
      {
        $con->beginTransaction();

        $this->addToLog();
        //$objectClass::QueueProceed($params, $this, $objectSubmodel);
        call_user_func_array(array($objectClass, $objectMethod), array($params, $this, $queueTask));

        $con->commit();
      }
      catch (Exception $e)
      {
        $con->rollBack();

        $this->setStatus(self::STATUS__NEW);
        $this->save();

        throw $e;
      }
    }

    $this->setStatus(self::STATUS__DONE);
    $this->save();

    $this->addToLog();

    $this->delete();
  }

  /**
   * Add to log
   *
   * @param int $userId
   * @return QueueLog
   */
  public function addToLog($userId = null)
  {
    $queueLog = new QueueLog();
    $queueLog->setObjectModel($this->getObjectModel());
    $queueLog->setObjectSubmodel($this->getObjectSubmodel());
    $queueLog->setParams($this->getParams());
    $queueLog->setStatus($this->getStatus());
    $queueLog->setCreatedatetime(date('Y-m-d H:i:s'));
    if ($userId)
    {
      $queueLog->setUserId($userId);
    }
    $queueLog->save();
  }
}
